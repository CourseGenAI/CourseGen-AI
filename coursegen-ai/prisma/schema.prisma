generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


// This is a default next-auth tables required
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId],name:"userId")
  @@unique([provider, providerAccountId])
}

model Session { //used to mange session to persist user in our website
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId],name:"userId") //this is basically a planet scale specification , as planet scale does nto support forein key realtoin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image    String?
  credits   Int @default(5) //this is the credits used to geenrate free courses at max 5 timees and we decrement as they use it 


  accounts Account[]
  sessions Session[]
}


//course can contain many units
model Course {
  id String @id @default(cuid())
  name String
  image String?
  units Unit[] //this is how we show one to many realtion ship in prisma
}

//one unit contain many chapters
model Unit{
  id String @id @default(cuid())
  courseId String 

  name String
  course Course @relation(fields: [courseId], references: [id])
  chapters Chapter[]

  @@index([courseId], name:"courseId") //used to optimize databse queries
}

model Chapter{
  id String @id @default(cuid())
  unitId String 
  name String
  youtubeSearchQuery String//this is sent to the open ai api , we ask ai end point to return with a relavent search query so taht we can send search query to youtube api and obtain relavent video
  videoId String? //this is mapped to the youtube video , if in api it has id we map it else no
  summary String? @db.VarChar(3000)   //this is the transcript obtained from the youtube api , max 3000 charecters 

  unit Unit @relation(fields: [unitId],references: [id])

  @@index([unitId],name:"unitId")
}

